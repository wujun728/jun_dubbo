<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
	   http://code.alibabatech.com/schema/dubbo
	   http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

    <!--
        当前应用信息配置
    -->
    <dubbo:application name="msa-demo-provider" owner="easy-code" organization="easy-code"/>

    <dubbo:monitor address="10.100.19.104:20884"/>

    <!--
        多注册中心配置，竖号分隔表示同时连接多个不同注册中心，同一注册中心的多个集群地址用逗号分隔
    -->
    <dubbo:registry protocol="zookeeper" address="10.100.19.207:2181,10.100.19.208:2181,10.100.19.209:2181"/>

    <!--
        here we demonstrate both annotation-based and xml-based configs
    -->
    <dubbo:annotation package="com.jeasy.user.facade"/>

    <dubbo:protocol name="dubbo" port="20880" serialization="kryo"
                    optimizer="com.jeasy.SerializationOptimizerImpl"/>
    <!--
        <dubbo:protocol name="dubbo" serialization="fst" optimizer="com.jeasy.SerializationOptimizerImpl"/>
        <dubbo:protocol name="dubbo" serialization="nativejava"/>
        <dubbo:protocol name="dubbo" serialization="hessian2"/>
        <dubbo:protocol name="dubbo" serialization="fastjson"/>
        <dubbo:protocol name="dubbo" serialization="dubbo"/>
    -->

    <!--
        1. 选用了嵌入式的jetty来做rest server，同时，如果不配置server属性，rest协议默认也是选用jetty。
        jetty是非常成熟的java servlet容器，并和dubbo已经有较好的集成（目前5种嵌入式server中只有jetty
        和后面所述的tomcat、tjws，与dubbo监控系统等完成了无缝的集成），所以，如果你的dubbo系统是单独启动的进程，
        你可以直接默认采用jetty即可。dubbo中的rest协议默认将采用80端口.
        <dubbo:protocol name="rest" server="jetty"/>

        2. 配置选用了嵌入式的tomcat来做rest server。在嵌入式tomcat上，REST的性能比jetty上要好得多（参见后面的基准测试），
        建议在需要高性能的场景下采用tomcat。
        <dubbo:protocol name="rest" server="tomcat"/>

        3. 配置选用嵌入式的netty来做rest server。
        <dubbo:protocol name="rest" server="netty"/>

        4. 配置选用嵌入式的tjws或Sun HTTP server来做rest server。这两个server实现非常轻量级，
        非常方便在集成测试中快速启动使用，当然也可以在负荷不高的生产环境中使用。 注：tjws目前已经
        被deprecated掉了，因为它不能很好的和servlet 3.1 API工作。
        <dubbo:protocol name="rest" server="tjws"/>
        <dubbo:protocol name="rest" server="sunhttp"/>

        5. 如果你的dubbo系统不是单独启动的进程，而是部署到了Java应用服务器中，则建议你采用以下配置：
        <dubbo:protocol name="rest" server="servlet"/>

        6. 通过将server设置为servlet，dubbo将采用外部应用服务器的servlet容器来做rest server。同时，还要在dubbo系统的web.xml中添加如下配置：
        <web-app>
            <context-param>
                <param-name>contextConfigLocation</param-name>
                <param-value>/WEB-INF/classes/META-INF/spring/dubbo-demo-provider.xml</param-value>
            </context-param>

            <listener>
                <listener-class>com.credithc.shark.remoting.http.servlet.BootstrapListener</listener-class>
            </listener>

            <listener>
                <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
            </listener>

            <servlet>
                <servlet-name>dispatcher</servlet-name>
                <servlet-class>com.credithc.shark.remoting.http.servlet.DispatcherServlet</servlet-class>
                <load-on-startup>1</load-on-startup>
            </servlet>

            <servlet-mapping>
                <servlet-name>dispatcher</servlet-name>
                <url-pattern>/*</url-pattern>
            </servlet-mapping>
        </web-app>
        即必须将dubbo的BootstrapListener和DispatherServlet添加到web.xml，以完成dubbo的REST功能与外部servlet容器的集成。

        其实，这种场景下你依然可以坚持用嵌入式server，但外部应用服务器的servlet容器往往比嵌入式server更加强大
        （特别是如果你是部署到更健壮更可伸缩的WebLogic，WebSphere等），另外有时也便于在应用服务器做统一管理、监控等等。

        如果将dubbo REST部署到外部Tomcat上，并配置server="servlet"，即启用外部的tomcat来做为rest server的底层实现，
        则最好在tomcat上添加如下配置：
        <Connector port="8080" protocol="org.apache.coyote.http11.Http11NioProtocol"
               connectionTimeout="20000"
               redirectPort="8443"
               minSpareThreads="20"
               enableLookups="false"
               maxThreads="100"
               maxKeepAliveRequests="-1"
               keepAliveTimeout="60000"/>
        特别是maxKeepAliveRequests="-1"，这个配置主要是保证tomcat一直启用http长连接，以提高REST调用性能。
        但是请注意，如果REST消费端不是持续的调用REST服务，则一直启用长连接未必是最好的做法。另外，一直启用长连
        接的方式一般不适合针对普通webapp，更适合这种类似rpc的场景。所以为了高性能，在tomcat中，dubbo REST应
        用和普通web应用最好不要混合部署，而应该用单独的实例。

        7. 注意：如果你是用spring的ContextLoaderListener来加载spring，
        则必须保证BootstrapListener配置在ContextLoaderListener之前，否则dubbo初始化会出错。
     -->


    <!--
        1. 设置一个所有rest服务都适用的基础相对路径，即java web应用中常说的context path。只需要添加如下contextpath属性即可.
        <dubbo:protocol name="rest" port="8888" keepalive="true" server="netty" iothreads="5" threads="100" contextpath="services"/>

        2. 可以为rest服务配置线程池大小：
        <dubbo:protocol name="rest" threads="500"/>
        注意：目前线程池的设置只有当server="netty"或者server="jetty"或者server="tomcat"的时候才能生效。另外，如果server="servlet"，由于这时候启用
        的是外部应用服务器做rest server，不受dubbo控制，所以这里的线程池设置也无效。

        如果是选用netty server，还可以配置Netty的IO worker线程数：
        <dubbo:protocol name="rest" iothreads="5" threads="100"/>

        3. 注意：如果你是选用外部应用服务器做rest server, 即配置:
        <dubbo:protocol name="rest" port="8888" contextpath="services" server="servlet"/>
        则必须保证这里设置的port、contextpath，与外部应用服务器的端口、DispatcherServlet的上下文路径（即webapp path加上servlet url pattern）保持一致。

        4. Dubbo中的rest服务默认都是采用http长连接来访问，如果想切换为短连接，直接配置：
        <dubbo:protocol name="rest" keepalive="false"/>
        注意：这个配置目前只对server="netty"和server="tomcat"才能生效。

        5. 配置服务器提供端所能同时接收的最大HTTP连接数，防止REST server被过多连接撑爆，以作为一种最基本的自我保护机制：
        <dubbo:protocol name="rest" accepts="500" server="tomcat/>
        注意：这个配置目前只对server="tomcat"才能生效。

        6. 如果rest服务的消费端也是dubbo系统，可以像其他dubbo RPC机制一样，配置消费端调用此rest服务的最大超时时间以及每个消费端所能启动的最大HTTP连接数。
        <dubbo:service interface="xxx" ref="xxx" protocol="rest" timeout="2000" connections="10"/>
        当然，由于这个配置针对消费端生效的，所以也可以在消费端配置：
        <dubbo:reference id="xxx" interface="xxx" timeout="2000" connections="10"/>
        但是，通常我们建议配置在服务提供端提供此类配置。按照dubbo官方文档的说法：“Provider上尽量多配置Consumer端的属性，让Provider实现者一开始就思考Provider
        服务特点、服务质量的问题。”
        注意：如果dubbo的REST服务是发布给非dubbo的客户端使用，则这里<dubbo:service/>上的配置完全无效，因为这种客户端不受dubbo控制。

        7. Dubbo的REST支持用GZIP压缩请求和响应的数据，以减少网络传输时间和带宽占用，但这种方式会也增加CPU开销。
    -->

    <!--
        1. use tomcat server
        2. 用rest协议在8888端口暴露服务
        3. Dubbo的REST也支持JAX-RS标准的Filter和Interceptor，以方便对REST的请求与响应过程做定制化的拦截处理。
           其中，Filter主要用于访问和设置HTTP请求和响应的参数、URI等等。如:CacheControlFilter.java
           Interceptor主要用于访问和修改输入与输出字节流，例如，手动添加GZIP压缩.如:GZIPWriterInterceptor.java
        4. 在标准JAX-RS应用中，我们一般是为Filter和Interceptor添加@Provider annotation，然后JAX-RS runtime会
           自动发现并启用它们。而在dubbo中，我们是通过添加XML配置的方式来注册Filter和Interceptor.
        5. 在此，我们可以将Filter、Interceptor和DynamicFuture这三种类型的对象都添加到extension属性上，多个之间用
           逗号分隔。（DynamicFuture是另一个接口，可以方便我们更动态的启用Filter和Interceptor，感兴趣请自行google。）
        6. 当然，dubbo自身也支持Filter的概念，但我们这里讨论的Filter和Interceptor更加接近协议实现的底层，
           相比dubbo的filter，可以做更底层的定制化。
           注：这里的XML属性叫extension，而不是叫interceptor或者filter，是因为除了Interceptor和Filter，未来我们
           还会添加更多的扩展类型。
        7. 如果REST的消费端也是dubbo系统（参见下文的讨论），则也可以用类似方式为消费端配置Interceptor和Filter。但注
           意，JAX-RS中消费端的Filter和提供端的Filter是两种不同的接口。例如前面例子中服务端是ContainerResponseFilter接口，
           而消费端对应的是ClientResponseFilter.
        8. Dubbo的REST也支持JAX-RS标准的ExceptionMapper，可以用来定制特定exception发生后应该返回的HTTP响应。
        9. Dubbo rest支持输出所有HTTP请求/响应中的header字段和body消息体。LoggingFilter
    -->
    <!--<dubbo:protocol name="rest" port="8888" threads="500" contextpath="services" server="tomcat" accepts="500"-->
                    <!--extension="com.jeasy.extension.TraceInterceptor,-->
                    <!--com.jeasy.extension.TraceFilter,-->
                    <!--com.jeasy.extension.ClientTraceFilter,-->
                    <!--com.jeasy.extension.DynamicTraceBinding,-->
                    <!--com.jeasy.extension.CustomExceptionMapper,-->
                    <!--com.alibaba.dubbo.rpc.protocol.rest.support.LoggingFilter"/>-->

    <!--
        use the external tomcat or other server with the servlet approach;
        the port and contextpath must be exactly the same as those in external server
    -->
    <dubbo:protocol name="rest" port="8080" contextpath="rpc" server="servlet"/>

    <dubbo:protocol name="http" port="8889"/>
    <dubbo:protocol name="hessian" port="8890"/>
    <dubbo:protocol name="webservice" port="8892"/>

    <!--
        声明需要暴露的服务接口
    -->
    <dubbo:service interface="com.jeasy.bid.BidService" ref="bidService" protocol="dubbo"/>

    <!--
        we add the group property since there's another annotation-configured service impl: com.jeasy.user.facade.AnnotationDrivenUserRestServiceImpl
    -->
    <dubbo:service interface="com.jeasy.user.UserService" ref="userService" protocol="dubbo"
                   group="xmlConfig"/>

    <!--
        1. 为了和其他dubbo远程调用协议保持一致，在rest中作校验的annotation必须放在服务的接口上,
        把annotation放在接口上至少有一个好处是，dubbo的客户端可以共享这个接口的信息，dubbo甚
        至不需要做远程调用，在本地就可以完成输入校验。

        然后按照dubbo的标准方式在XML配置中打开验证：
        <dubbo:service interface=xxx.UserService" ref="userService" protocol="rest" validation="true"/>

        2. 在dubbo的其他很多远程调用协议中，如果输入验证出错，是直接将RpcException抛向客户端，而在rest中由于客户端经常是非dubbo，甚至非java的系统，所以不便直接抛出Java异常。因此，目前我们将校验错误以XML的格式返回：
        <violationReport>
            <constraintViolations>
                <path>getUserArgument0</path>
                <message>User ID must be greater than 1</message>
                <value>0</value>
            </constraintViolations>
        </violationReport>

        如果你认为默认的校验错误返回格式不符合你的要求，可以如上面章节所述，添加自定义的ExceptionMapper来自由的定制错误返回格式。
        需要注意的是，这个ExceptionMapper必须用泛型声明来捕获dubbo的RpcException，才能成功覆盖dubbo rest默认的异常处理策略。
        为了简化操作，其实这里最简单的方式是直接继承dubbo rest的RpcExceptionMapper，并覆盖其中处理校验异常的方法即可.
    -->
    <dubbo:service interface="com.jeasy.user.facade.UserRestService" ref="userRestService" protocol="rest"
                   validation="true"/>

    <dubbo:service interface="com.jeasy.user.facade.AnotherUserRestService" ref="anotherUserRestService"
                   protocol="rest" timeout="2000" connections="100" validation="true"/>

    <bean id="bidService" class="com.jeasy.bid.BidServiceImpl"/>

    <bean id="userService" class="com.jeasy.user.UserServiceImpl"/>

    <bean id="userRestService" class="com.jeasy.user.facade.UserRestServiceImpl">
        <property name="userService" ref="userService"/>
    </bean>

    <bean id="anotherUserRestService" class="com.jeasy.user.facade.AnotherUserRestServiceImpl">
        <property name="userService" ref="userService"/>
    </bean>

    <!--
        谢谢，对于jax-rs和spring mvc，其实我对spring mvc的rest支持还没有太深入的看过，说点初步想法，请大家指正：

        spring mvc也支持annotation的配置，其实和jax-rs看起来是非常非常类似的。

        我个人认为spring mvc相对更适合于面向web应用的restful服务，比如被AJAX调用，也可能输出HTML之类的，应用中还
        有页面跳转流程之类，spring mvc既可以做好正常的web页面请求也可以同时处理rest请求。但总的来说这个restful服务
        是在展现层或者叫web层之类实现的

        而jax-rs相对更适合纯粹的服务化应用，也就是传统Java EE中所说的中间层服务，比如它可以把传统的EJB发布成restful
        服务。在spring应用中，也就把spring中充当service之类的bean直接发布成restful服务。总的来说这个restful服务是
        在业务、应用层或者facade层。而MVC层次和概念在这种做比如（后台）服务化的应用中通常是没有多大价值的。

        当然jax-rs的有些实现比如jersey，也试图提供mvc支持，以更好的适应上面所说的web应用，但应该是不如spring mvc。

        在dubbo应用中，我想很多人都比较喜欢直接将一个本地的spring service bean（或者叫manager之类的）完全透明的发布
        成远程服务，则这里用JAX-RS是更自然更直接的，不必额外的引入MVC概念。当然，先不讨论透明发布远程服务是不是最佳实践，
        要不要添加facade之类。

        当然，我知道在dubbo不支持rest的情况下，很多朋友采用的架构是spring mvc restful调用dubbo (spring) service
        来发布restful服务的。这种方式我觉得也非常好，只是如果不修改spring mvc并将其与dubbo深度集成，restful服务不能
        像dubbo中的其他远程调用协议比如webservices、dubbo rpc、hessian等等那样，享受诸多高级的服务治理的功能，比如：
        注册到dubbo的服务注册中心，通过dubbo监控中心监控其调用次数、TPS、响应时间之类，通过dubbo的统一的配置方式控制其
        比如线程池大小、最大连接数等等，通过dubbo统一方式做服务流量控制、权限控制、频次控制。另外spring mvc仅仅负责服务
        端，而在消费端，通常是用spring restTemplate，如果restTemplate不和dubbo集成，有可能像dubbo服务客户端那样自动
        或者人工干预做服务降级。如果服务端消费端都是dubbo系统，通过spring的rest交互，如果spring rest不深度整合dubbo，
        则不能用dubbo统一的路由分流等功能。

        当然，其实我个人认为这些东西不必要非此即彼的。我听说spring创始人rod johnson总是爱说一句话，
        the customer is always right，其实与其非要探讨哪种方式更好，不如同时支持两种方式就是了，
        所以原来在文档中也写过计划支持spring rest annoation，只是不知道具体可行性有多高。

        1. JAX-RS中重载的方法能够映射到同一URL地址吗？
        http://stackoverflow.com/questions/17196766/can-resteasy-choose-method-based-on-query-params

        2. JAX-RS中作POST的方法能够接收多个参数吗？
        http://stackoverflow.com/questions/5553218/jax-rs-post-multiple-objects

        注:以上备注,均来自:https://dangdangdotcom.github.io/dubbox/rest.html
    -->
</beans>
