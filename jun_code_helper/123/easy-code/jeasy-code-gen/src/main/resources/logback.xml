<?xml version="1.0" encoding="UTF-8"?>
<!--
    scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
    scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
    debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

    <property name="APP_NAME" value="niux-code-gen" />
    <!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径-->
    <property name="LOG_HOME" value="/Users/TaoBangren/Desktop/" />

    <!--
        每个logger都关联到logger上下文，默认上下文名称为“default”。但可以使用<contextName>设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改。
     -->
    <contextName>${APP_Name}</contextName>

    <!--
        key:标识此<timestamp> 的名字；datePattern：设置将当前时间（解析配置文件的时间）转换为字符串的模式，遵循java.txt.SimpleDateFormat的格式。
    -->
    <timestamp key="BOOT_SECOND" datePattern="yyyyMMdd'T'HHmmss"/>

    <!-- 控制台输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!--
            encoder：对日志进行格式化，未配置class属性时，默认配置为PatternLayoutEncoder
        -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
        </encoder>

        <!-- 只输出level级别的日志 -->
        <filter class = "ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <!--
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
            -->
        </filter>

    </appender>
    <!-- 按照每天生成日志文件 -->
    <appender name="FILE"  class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${LOG_HOME}/${APP_NAME}.log.%d{yyyy-MM-dd}.log</FileNamePattern>
            <!--日志文件保留天数-->
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
        <!--
            encoder：对日志进行格式化，未配置class属性时，默认配置为PatternLayoutEncoder
        -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
        </encoder>
        <!--日志文件最大的大小-->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>10MB</MaxFileSize>
        </triggeringPolicy>
        <!-- 只输出level级别以上的日志 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
    </appender>
    <!-- 日志异步到数据库
    <appender name="DB" class="ch.qos.logback.classic.db.DBAppender">
        <connectionSource class="ch.qos.logback.core.db.DriverManagerConnectionSource">
            <dataSource class="com.mchange.v2.c3p0.ComboPooledDataSource">
                <driverClass>com.mysql.jdbc.Driver</driverClass>
                <url>jdbc:mysql://127.0.0.1:3306/databaseName</url>
                <user>root</user>
                <password>root</password>
            </dataSource>
        </connectionSource>
    </appender>
    -->
    <!--
        name：用来指定受此logger约束的某一个包或者具体的某一个类。
        level：用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前logger将会继承上级的级别。
        additivity：是否向上级logger传递打印信息。默认是true。
        <logger>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger。
    -->
    <logger name="net.paoding" level="DEBUG">
        <appender-ref ref="STDOUT" />
    </logger>
    <logger name="net.paoding.rose" level="DEBUG">
        <appender-ref ref="STDOUT" />
    </logger>
    <logger name="net.paoding.rose.RoseFilter" level="DEBUG">
        <appender-ref ref="STDOUT" />
    </logger>
    <logger name="net.paoding.rose.web.controllers.roseInfo" level="DEBUG">
        <appender-ref ref="STDOUT" />
    </logger>
    <logger name="net.paoding.rose.web.controllers.roseInfo.AccessControlInterceptor" level="DEBUG">
        <appender-ref ref="STDOUT" />
    </logger>
    <logger name="net.paoding.rose.web.controllers.roseInfo.TreeController" level="DEBUG">
        <appender-ref ref="STDOUT" />
    </logger>
    <logger name="net.paoding.rose.web.impl.thread.Rose" level="DEBUG">
        <appender-ref ref="STDOUT" />
    </logger>
    <logger name="net.paoding.rose.web.impl.mapping.MappingNode" level="DEBUG">
        <appender-ref ref="STDOUT" />
    </logger>
    <logger name="net.paoding.rose.controllers.ToolsController" level="DEBUG">
        <appender-ref ref="STDOUT" />
    </logger>
    <logger name="net.paoding.rose.jade" level="DEBUG">
        <appender-ref ref="STDOUT" />
    </logger>
    <logger name="org.springframework" level="DEBUG">
        <appender-ref ref="STDOUT" />
    </logger>
    <logger name="org.apache" level="DEBUG">
        <appender-ref ref="STDOUT" />
    </logger>
    <!--
        <root>：也是<logger>元素，但是它是根logger。只有一个level属性，应为已经被命名为"root".
    -->
    <root level="DEBUG">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="FILE" />
    </root>
</configuration>
